{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-e835979c\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"row\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1"],"sources":["F:\\calculator-app\\src\\components\\Calculator.vue"],"sourcesContent":["<template>\n\n<div class=\"row\">\n  \n</div>\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String\n  }, \n  data(){\n    return {\n      output : '', \n      previousVlaue: null,\n      operationFired: false,\n    }\n  }, \n  methods:{\n    clearFiled(){\n      this.output = '';\n    }, \n    setNegativeOrPositive(){\n        this.output = this.output[0] === '-' ? this.output.slice(1) : `-${this.output}`\n    }, \n    calculatePercentage(){\n        this.output = parseFloat(this.output)/100\n    }, \n    getNumber(number){\n      if(this.operationFired){\n        this.output = '';\n        this.operationFired = false\n      }\n\n      this.output = `${this.output}${number}`;\n      // console.log(this.output);\n    }, \n    getDot(){\n      if(this.output.indexOf('.') === -1){\n        this.output = this.output + '.';\n      }\n    },\n    proecessOutput(string){\n\n      if(string === 'add'){\n        this.operation = (a, b) => {\n          return parseFloat(a) + parseFloat(b) ; \n        }\n      }else if(string == 'subtract'){\n        this.operation = (a, b) => {\n          return parseFloat(a) - parseFloat(b) ; \n        }\n      }else if(string === 'multiply'){\n        this.operation = (a, b) => {\n          return parseFloat(a) * parseFloat(b) ; \n        }\n      }else if(string == 'divide'){\n        this.operation = (a, b) => {\n          return parseFloat(a) / parseFloat(b) ; \n        }\n      }\n     \n      this.previousVlaue = this.output;\n      this.operationFired = true;\n    },\n    result(){\n      this.output = `${this.operation(this.previousVlaue, this.output)}`;\n      this.previousVlaue = null; \n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n\n</style>\n"],"mappings":";;;EAEKA,KAAK,EAAC;AAAK;;uBAAhBC,mBAAA,CAEM,OAFNC,UAEM"},"metadata":{},"sourceType":"module","externalDependencies":[]}